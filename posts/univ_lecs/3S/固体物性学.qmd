---
title: "固体物性学"
author: "Serika Yuzuki"
date: "2024-4-5"
categories: [University, 2024]
image: "images/thumbnail.png"
---

$$ \require{physics} 
\require{mhchem}
$$

# ノート

## 結晶格子

### 結晶とは

- 結晶とは、原子や分子が規則的に並んだ固体のことである。
- 理想的な結晶、現実の結晶、多結晶、非晶質(アモルファス)の4つの種類がある。

講義ではまず２次元Latticeについて考える。

### 基本単位胞

- 結晶構造を記述するための基本単位胞とは、結晶構造の最小単位であり、その結晶構造を無限に繰り返すことで全体の結晶構造が構築される。
- 基本単位胞の取り方は無限にあるが、最も簡単なものを選ぶといいらしい。
- 基本単位胞内の任意の点を格子点と呼んでいる。ただし、全ての別の単位胞に対して同じ位置として考える。バラバラに選ぶものではない。
- 格子点同士を最短で結ぶベクトルを基本並進ベクトルと呼ぶ。

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Define the lattice vectors
a1 = np.array([1, 0])
a2 = np.array([0, 1])

# Generate a grid of lattice points
x = np.arange(-2, 3)
y = np.arange(-2, 3)
X, Y = np.meshgrid(x, y)

# Plot the lattice points
plt.figure(figsize=(6, 6))
plt.scatter(X, Y, color='blue')

# Plot the lattice vectors
plt.quiver(0, 0, a1[0], a1[1], angles='xy', scale_units='xy', scale=1, color='red')
plt.quiver(0, 0, a2[0], a2[1], angles='xy', scale_units='xy', scale=1, color='green')

# Set the aspect ratio and limits
plt.gca().set_aspect('equal', adjustable='box')
plt.xlim(-2.5, 2.5)
plt.ylim(-2.5, 2.5)

# Add labels
plt.text(a1[0], a1[1], 'a1', fontsize=12, ha='right')
plt.text(a2[0], a2[1], 'a2', fontsize=12, va='bottom')

plt.show()
```

- すると、任意の格子点は $\symbfit{R} = n_1 \symbfit{a}_1 + n_2 \symbfit{a}_2$ と表すことができる。

### ３次元結晶格子

- ３次元結晶格子は、２次元結晶格子の拡張である。並進ベクトルの性質はそれほど変わらない。
- ３次元格子は１４種類のブラベ格子に分類される。
- ３次元格子の並進ベクトルを基底ベクトルで表すなんてこともする。
    - 体心立方格子
        $$
        \begin{aligned}
        \symbfit{a}_1 &= \frac{a}{2} ( \symbfit{e}_x + \symbfit{e}_y + \symbfit{e}_z ) \\
        \symbfit{a}_2 &= \frac{a}{2} ( -\symbfit{e}_x + \symbfit{e}_y + \symbfit{e}_z ) \\
        \symbfit{a}_3 &= \frac{a}{2} ( \symbfit{e}_x - \symbfit{e}_y + \symbfit{e}_z ) \\
        \end{aligned}
        $$

    - 面心立方格子
        $$
        \begin{aligned}
        \symbfit{a}_1 &= \frac{a}{2} ( \symbfit{e}_x + \symbfit{e}_y ) \\
        \symbfit{a}_2 &= \frac{a}{2} ( -\symbfit{e}_x + \symbfit{e}_y ) \\
        \symbfit{a}_3 &= \frac{a}{2} ( \symbfit{e}_x - \symbfit{e}_y ) \\
        \end{aligned}
        $$

- 基本単位胞では面倒なことがあるので、慣用単位砲で考えることもある。その一例として、ウィグナー・ツァイト胞がある。ウィグナーサイツ胞とは、ある格子点と、その周りの格子点との間の垂直二等分面で囲まれた領域における最小のセル（胞）のことである。
    - 二次元のウィグナーサイツ胞は、過去問のセクションで図示している。

### 逆格子

周期性のある関数を一つ考える。

$$
f(x) = f(x+n\lambda)
$$

この時、

$$
f(x)=\sum_{n=-\infty}^{\infty} c_n \exp \left(\frac{2 \pi i n x}{\lambda}\right) = \sum_{n=-\infty}^{\infty} c_n \exp \left(iG_n x\right)
$$

ただしフーリエ係数は,
$$
c_n=\frac{1}{\lambda} \int_0^\lambda f(x) \exp \left(-iG_n x\right) \dd x
$$

ここで、 $G_n = 2\pi n / \lambda$ となり、離散的な値を持つ。この時の $(G_n)$ を逆格子ベクトルと呼ぶ。逆格子スペクトルは、要するに $G_n$ を横軸にして、どの端数が一番強く現れているのかを、 $c_n$ 高さで表しているだけなのだ。

これを立体に拡張させる。

$$
f(\symbfit{X})=\sum_{n=-\infty}^{\infty} c_n \exp \left(i\symbfit{G_n} \cdot (\symbfit{r}+\symbfit{R})\right)
$$

ここで、 $\symbfit{R}$ は関数が一周して帰ってくる値。

$$
\symbfit{G_n} \cdot \symbfit{R} = 2\pi N
$$

というのは次からわかる。

$$
\begin{aligned}
\symbfit{G_n} \cdot \symbfit{a}_1 &= 2\pi n_1 \\
\symbfit{G_n} \cdot \symbfit{a}_2 &= 2\pi n_2 \\
\symbfit{G_n} \cdot \symbfit{a}_3 &= 2\pi n_3 \\
\end{aligned}
$$

この理由は、要するに波が一周して戻るから。数式で表せば、$f(\symbfit{r}+\symbfit{R})=(\symbfit{r})$ で導ける。

ここで次のようなベクトルを考える。

$$
\symbfit{G_n} = n_1 \symbfit{b}_1 + n_2 \symbfit{b}_2 + n_3 \symbfit{b}_3
$$

これで、

$$
\symbfit{a_i} \cdot \symbfit{b}_j = 2\pi \delta_{ij}
$$

とすれば、

$$
\symbfit{G_n} \cdot \symbfit{a_i} = 2\pi n_i
$$

になる。これを逆格子ベクトルと呼ぶ。

$$
\begin{aligned}
\symbfit{b}_1 &= 2\pi \frac{\symbfit{a}_2 \times \symbfit{a}_3}{\symbfit{a}_1 \cdot (\symbfit{a}_2 \times \symbfit{a}_3)} \\
\symbfit{b}_2 &= 2\pi \frac{\symbfit{a}_3 \times \symbfit{a}_1}{\symbfit{a}_1 \cdot (\symbfit{a}_2 \times \symbfit{a}_3)} \\
\symbfit{b}_3 &= 2\pi \frac{\symbfit{a}_1 \times \symbfit{a}_2}{\symbfit{a}_1 \cdot (\symbfit{a}_2 \times \symbfit{a}_3)} \\
\end{aligned}
$$

となる。これが何がありがたいかというと、空間内の任意の周期性のある物理量をフーリエ変換することで、逆格子空間における格子点の位置に一つ一つ何かしらの強さの値を置くことで見ることができることかもしれない。つまり、フーリエ変換の長さが短くなるほどに、それを表すのに必要な逆空間の格子点は減るということかな？　ここら辺が何の役に立つのかわからんのは、後からわかる感じの説明の仕方をしてるから。

例として二次元単純結晶について考えると、

$$
\begin{aligned}
\symbfit{a}_1 &= a \symbfit{e}_x \\
\symbfit{a}_2 &= b \symbfit{e}_y \\
\end{aligned}
$$

これの逆格子ベクトルは、

$$
\begin{aligned}
\symbfit{b}_1 &= \frac{2\pi}{a} \symbfit{e}_y \\
\symbfit{b}_2 &= \frac{2\pi}{b} \symbfit{e}_x \\
\end{aligned}
$$

なので、

$$
\begin{aligned}
k_x \in \left[ -\frac{\pi}{a}, \frac{\pi}{a} \right] \\
k_y \in \left[ -\frac{\pi}{b}, \frac{\pi}{b} \right] \\
\end{aligned}
$$

がBrillouin Zoneとなる。つまり、逆空間内のWigner-Seitz cellになる。

### ブリルアンゾーン

一次元の場合、結晶間隔を $a$ とすると、

$$
-\frac{\pi}{a} \leq k \leq \frac{\pi}{a}
$$

これをブリルアンゾーンと呼ぶ。これは逆格子ベクトルの範囲を表している。これも何でやってるかはわからん。

### 結晶によるX線回折

この話は先ほどの議論とは類似はするが話が違う気がする。

考えを乱さないためにここには書かないし、教科書に板書がそのままある。

ちょっとした話だが、要するに、ラウエ関数

$$
\frac{\sin ^2 \left(\pi N \symbfit{r}\cdot \symbfit{K}_x \right)}{\sin ^2 \left(\pi \symbfit{r}\cdot \symbfit{K}_x \right)}
$$

を考えた時に、 $N$ というのは、どれだけ原子数をスキップしてX線が強め合うのかで、このグラフは $\symbfit{a}\cdot \symbfit{K}_x$ が整数の時に最強になって、ゆえにそれをラウエ条件と呼んでいて、

$$
\begin{aligned}
\symbfit{r}\cdot \symbfit{K}_x = h \\
\symbfit{r}\cdot \symbfit{K}_y = k \\
\symbfit{r}\cdot \symbfit{K}_z = l \\
\end{aligned}
$$

とかってなって、上と途中と同じ理屈でやってるだけで、議論は最初から同じではない。

X線回折になると、単位胞子の中身だけを考えれば、その原子分子の位置がわかるということになる。だから、ブリルアンゾーンの中だけを考えれば、波長のより短いところにあるというふうに見れる場所の原子の場所がわかる。それ以上の波長の場所にあるのは、つまり、繰り返されたものだけだと言える。

### 結合

結合エネルギーとは、結晶を引き剥がして無限遠に持っていくのに必要なエネルギー。

#### 共有結合

$$
\hat{H} = -\frac{\hbar^2}{2me} \nabla - \frac{e^2}{4\pi\epsilon_0 r_1} - \frac{e^2}{4\pi\epsilon_0 r_2} + \frac{e^2}{4\pi\epsilon_0 R}
$$

この軌道方程式を解く。

$$
\hat{H} (c_1\phi_1 + c_2\phi_2) = E(c_1\phi_1 + c_2\phi_2)
$$

左から $\phi_1^*$ とかけて積分すると

$$
\begin{aligned}
H_{11} c_1 + H_{12} c_2 &= Ec_1 + S_{12}Ec_2 \\
H_{21} c_1 + H_{22} c_2 &= S_{21}Ec_1 + Ec_2 \\
\end{aligned}
$$

これを整理すると、

$$
\begin{pmatrix}
H_{11} - E & H_{12} - S_{12} \\
H_{21} S_{21} & H_{22} - E \\
\end{pmatrix}
\begin{pmatrix}
c_1 \\
c_2 \\
\end{pmatrix}
=
\begin{pmatrix}
0 \\
0 \\
\end{pmatrix}
$$

この非自明な解があるのは、行列式がゼロになる時である。

$$
\begin{vmatrix}
H_{11} - E & H_{12} -ES_{12} \\
H_{21}- ES_{21} & H_{22} - E \\
\end{vmatrix}
= 0
$$

$S_{12} = S_{21}, H_{12}=H_{21}, H_{11}=H_{22}$ であることを考えると、

$$
(H_{11} - E)^2 - (H_{12} - SE) = 0
$$

となって以下の解が出てくる

$$
\begin{aligned}
E_+ = \frac{H_{11} + H_{12}}{1+S} \\
E_- = \frac{H_{11} - H_{12}}{1-S} \\
\phi_+ = \frac{\phi_1 + \phi_2}{\sqrt{2(1+S)}} \\
\phi_- = \frac{\phi_1 - \phi_2}{\sqrt{2(1-S)}} \\
\end{aligned}
$$

##### ダイヤモンドの共有結合

$$
\begin{aligned}
\phi_1 &= \frac{1}{2} (\xi_{2s} - \xi_{2p_x} - \xi_{2p_y} - \xi_{2p_z}) \\
\phi_2 &= \frac{1}{2} (\xi_{2s} 2 \xi_{2p_x} + \xi_{2p_y} + \xi_{2p_z}) \\
\phi_3 &= \frac{1}{2} (\xi_{2s} + \xi_{2p_x} - \xi_{2p_y} - \xi_{2p_z}) \\
\phi_4 &= \frac{1}{2} (\xi_{2s} - \xi_{2p_x} + \xi_{2p_y} - \xi_{2p_z}) \\
\end{aligned}
$$

ところが、$sp3$ 混成軌道への昇位にかかるエネルギーは $7.4 \symup{eV}$ もかかるが、結合エネルギーが $7.3 \symup{eV}$ もあるので、安定している。

### イオン結合

$i$ 番目のイオンにかかるイオン間のクーロン相互作用によるエネルギーは

$$
\begin{aligned}
E_i &= -\frac{e^2}{4\pi\epsilon_0} \sum_{j \neq i} \frac{Z_i Z_j}{r_{ij}}\\
&= M \times \frac{Z_i Z_j e^2}{4 \pi \epsilon d}
$$

ここで $M$ はマーデルング定数という。

# 過去問

## 2018年度

### 問1

1. ウィグナーサイツ胞とは、ある格子点と、その周りの格子点との間の垂直二等分面で囲まれた領域における最小のセル（胞）のことである。

```{python}
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Rectangle

# Define the lattice vectors
a1 = np.array([1, 0])
a2 = np.array([0, 1])

# Generate a grid of lattice points
x = np.arange(-2, 3)
y = np.arange(-2, 3)
X, Y = np.meshgrid(x, y)

# Plot the lattice points
plt.figure(figsize=(6, 6))
plt.scatter(X, Y, color='blue')

# Plot the lattice vectors
plt.quiver(0, 0, a1[0], a1[1], angles='xy', scale_units='xy', scale=1, color='red')
plt.quiver(0, 0, a2[0], a2[1], angles='xy', scale_units='xy', scale=1, color='green')

# Draw the Wigner-Seitz cell
rectangle = Rectangle((-0.5, -0.5), 1, 1, edgecolor='black', facecolor='none')
plt.gca().add_patch(rectangle)

# Set the aspect ratio and limits
plt.gca().set_aspect('equal', adjustable='box')
plt.xlim(-2.5, 2.5)
plt.ylim(-2.5, 2.5)

# Add labels
plt.text(a1[0], a1[1], 'a1', fontsize=12, ha='right')
plt.text(a2[0], a2[1], 'a2', fontsize=12, va='bottom')

plt.show()
```

```{python}
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import RegularPolygon

# Define the lattice vectors
a1 = np.array([1, 0])
a2 = np.array([1/2, np.sqrt(3)/2])

# Generate a grid of lattice points
x = np.arange(-2, 3)
y = np.arange(-2, 3)
X, Y = np.meshgrid(x, y)

# Generate the hexagonal lattice points
X_hex = X + Y/2
Y_hex = Y * np.sqrt(3)/2

# Plot the lattice points
plt.figure(figsize=(6, 6))
plt.scatter(X_hex, Y_hex, color='blue')

# Plot the lattice vectors
plt.quiver(0, 0, a1[0], a1[1], angles='xy', scale_units='xy', scale=1, color='red')
plt.quiver(0, 0, a2[0], a2[1], angles='xy', scale_units='xy', scale=1, color='green')

# Draw the Wigner-Seitz cell
polygon = RegularPolygon((0, 0), 6, radius=1/np.sqrt(3), edgecolor='black', facecolor='none')
plt.gca().add_patch(polygon)

# Set the aspect ratio and limits
plt.gca().set_aspect('equal', adjustable='box')
plt.xlim(-2.5, 2.5)
plt.ylim(-2.5, 2.5)

# Add labels
plt.text(a1[0], a1[1], 'a1', fontsize=12, ha='right')
plt.text(a2[0], a2[1], 'a2', fontsize=12, va='bottom')

plt.show()
```

2. 三次元六方格子の逆格子点の求め方は次のとおり。

三次元六方格子の基本並進ベクトルは以下のように表されます：

$$
\begin{aligned}
\mathbf{a}_1 &= a \begin{pmatrix} 1 \\ 0 \\ 0 \end{pmatrix} \\
\mathbf{a}_2 &= a \begin{pmatrix} -\frac{1}{2} \\ \frac{\sqrt{3}}{2} \\ 0 \end{pmatrix} \\
\mathbf{a}_3 &= a \begin{pmatrix} 0 \\ 0 \\ c \end{pmatrix}
\end{aligned}
$$

ここで、$a$ は格子定数、$c$ は六方格子の高さです。

これらの基本並進ベクトルから逆格子ベクトルを求めるには、以下の公式を使用します：

$$
b_i = 2\pi \frac{a_j \times a_k}{a_1 \cdot (a_2 \times a_3)}
$$

ここで、(i, j, k) は (1, 2, 3)、(2, 3, 1)、(3, 1, 2) の任意の巡回置換です。

したがって、三次元六方格子の逆格子ベクトルは以下のようになります：

$$
b_1 = 2\pi \frac{a}{V} (c, -\sqrt{3}/2, 1/2)
$$
$$
b_2 = 2\pi \frac{a}{V} (0, \sqrt{3}, 0)
$$
$$
b_3 = 2\pi \frac{a}{V} (0, 0, 2\pi/c)
$$

ここで、$V = a^2 \sqrt{3} c / 2$ は単位胞の体積です。

これらの逆格子ベクトルは、逆格子空間における格子点の位置を決定します。

```{python}
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Define the reciprocal lattice vectors
b1 = np.array([1, -1/np.sqrt(3), 0])
b2 = np.array([0, 2/np.sqrt(3), 0])
b3 = np.array([0, 0, 1])

# Generate a grid of reciprocal lattice points
x = np.arange(-2, 3)
y = np.arange(-2, 3)
z = np.arange(-2, 3)
X, Y, Z = np.meshgrid(x, y, z)

# Convert the grid to reciprocal lattice coordinates
X_rec = X*b1[0] + Y*b2[0] + Z*b3[0]
Y_rec = X*b1[1] + Y*b2[1] + Z*b3[1]
Z_rec = X*b1[2] + Y*b2[2] + Z*b3[2]

# Plot the reciprocal lattice points
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X_rec, Y_rec, Z_rec, color='blue')

# Set the aspect ratio and limits
ax.set_xlabel('b1')
ax.set_ylabel('b2')
ax.set_zlabel('b3')

plt.show()
```

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Define the lattice vectors
a1 = np.array([1, 0])
a2 = np.array([1/2, np.sqrt(3)/2])

# Define the reciprocal lattice vectors
b1 = np.array([1, -1/np.sqrt(3)])
b2 = np.array([0, 2/np.sqrt(3)])

# Generate a grid of lattice points
x = np.arange(-2, 3)
y = np.arange(-2, 3)
X, Y = np.meshgrid(x, y)

# Convert the grid to lattice coordinates
X_lat = X*a1[0] + Y*a2[0]
Y_lat = X*a1[1] + Y*a2[1]

# Convert the grid to reciprocal lattice coordinates
X_rec = X*b1[0] + Y*b2[0]
Y_rec = X*b1[1] + Y*b2[1]

# Plot the lattice points
plt.figure(figsize=(6, 6))
plt.scatter(X_lat, Y_lat, color='blue', label='Lattice points')

# Plot the reciprocal lattice points
plt.scatter(X_rec, Y_rec, color='red', label='Reciprocal lattice points')

# Set the aspect ratio and limits
plt.gca().set_aspect('equal', adjustable='box')
plt.xlim(-2.5, 2.5)
plt.ylim(-2.5, 2.5)

# Add a legend
plt.legend()

plt.show()
```

### 問2

1. 普通に運動方程式を立てる。

$$
m\ddots{x_j} = -K(x_j - x_{j-1}) + K(x_{j+1} - x_j) = K(x_{j+1} - 2x_j + x_{j-1})
$$

2.

$$
x_j(t) = A e^{i(kja - \omega t)}
$$

ここで、$A$ は振幅、$k$ は波数、$a$ は格子定数（原子間距離）、$\omega$ は角周波数です。代入して整理すると、次のようになります：

$$
m\omega^2 = 2K(1 - \cos(ka))
$$

これは、振動数 $\omega$ が波数 $k$ に依存するディスパージョン関係を表しています。

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Define the parameters
m = 1.0  # atomic mass
K = 1.0  # spring constant
a = 1.0  # lattice constant

# Define the wave number range within the first Brillouin zone
k = np.linspace(-np.pi/a, np.pi/a, 1000)

# Calculate the angular frequency
omega = np.sqrt(2*K/m * (1 - np.cos(k*a)))

# Plot the dispersion relation
plt.figure(figsize=(6, 6))
plt.plot(k, omega)
plt.xlabel('k (wave number)')
plt.ylabel('ω (angular frequency)')
plt.title('Dispersion relation in the first Brillouin zone')
plt.grid(True)
plt.show()
```

### 問3

![](images/固体物性学/1.png)

