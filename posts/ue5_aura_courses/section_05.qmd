---
title: "section_05"
author: "Serika Yuzuki"
date: "2023-11-25"
categories: [UE5, Aura, Udemy, Game, Programming]
image: "images/thumbnail.png"
---

## 概要

section 05 UI

1. Use UUserWidget BP Class to implement Widgets
    1. Creating Widget and Widget Controller C++ class.
    1. Creating a WBP derived from Widget class.
    1. Making WBP reusable in other classes, Setting up contents in Hierachybars Variable.
        1. Setting up those variables by Blueprint
        1. When setting up padding "Slot as Overlay Slot" was used.
    1. Making HUD Class.
        1. In the HUD class, make a overlay variable.
        1. BP_HUD class.
        1. Also creating a HUD Controller class
        1. Creating and add to viewport overlay widget
    1. Setting up Widget Controller
        1. Creating `struct FWidgetControllerParams`
        1. Creating Setter for controller based on FWidgetControllerParams.
    1. Init Widgets Function in HUD. Execute in CharacterController
    1. Create Delegate for OnHealthChange
        1. Use DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam
        1. Setup Broadcast in Init
    1. Bindcallback in Controller
        1. ASC already has a delegate for valuechange: `GetGameplayAttributeValueChangeDelegate`
        1. Bind Function to it and in that funtion, broadcasting controller's onchanged delegate is a good way
    1. Setup Mana

## 発見

### Setting up Images by Slate Brush

[Slate Brush](https://docs.unrealengine.com/4.26/en-US/API/Runtime/SlateCore/Styling/FSlateBrush/)を使ってImagesのSet Brush関数で画像を定義した。

![](images/5-1.png)

### Hierarchie of HUD

```{mermaid}
classDiagram
    note for HUD "HUDは全てを含む"
    note for AuraUserWidget "AuraUserWidgetはControllerを持っている"
    note for AuraUserWidgetController "ControllerはWidgetを知る必要がない"
    class HUD{
        +OverlayWidget
        -OverlayWidgetController
        -OverlayWidgetClass
        -OverlayWidgetControllerClass
        +GetOverlayWidgetController()
	    +SetOverlayWidgetController(FWidgetControllerParams)
	    +InitOverlay(APlayerController* PC, APlayerState* PS, UAbilitySystemComponent* ASC, UAttributeSet* AS)
    }
    class AuraUserWidget {
        +WidgetController
        +SetWidgetController()
        -WidgetControllerSet()
    }
    class AuraUserWidgetController {
        -SetWidgetControllerParams()
        +PlayerController
        +PlayerState
        +AbilitySystemComponent
        +AttributeSet
    }
    class FWidgetControllerParams {
        +PlayerController
        +PlayerState
        +AbilitySystemComponent
        +AttributeSet
    }
    class BP_OverlayWidget{

    }
    class OverlayWdigetController {

    }

    OverlayWdigetController --|> AuraUserWidgetController : Inheritance
    BP_OverlayWidget --|> AuraUserWidget : Inheritance
    AuraUserWidgetController --* AuraUserWidget : Composition
    OverlayWdigetController --* BP_OverlayWidget : Composition
    BP_OverlayWidget --* HUD : Composition
    FWidgetControllerParams ..> AuraUserWidget : Defined in this
```

### Delegate について続き。

Delegateは、いろんな関数のAdressをStoreしたもの。で、UEの場合、そのDelegateの定義は

```{.cpp filename="OverlayWidgetController.cpp"}
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnHealthChangedSignature, float, NewHealth);
```

のようにする。これで定義したDelegateの変数の定義は

```{.cpp filename="OverlayWidgetController.cpp"}
UPROPERTY(BlueprintAssignable, Category = "GAS|Attributes")
FOnHealthChangedSignature OnHealthChanged;
```

のようにしておき、この変数の中に関数のアドレスを入れるのに使うのは、他のcppファイルでやる。例えばWidgetはControllerを知っているけど、Controllerは知らないので、

```{.cpp filename="OverlayWidget.cpp"}
void UOverlayWidget::WidgetControllerSet()
{
    WidgetController->OnHealthChanged.AddDynamic(this, &UOverlayWidget::OnHealthChanged)
}

void UOverlayWidget::OnHealthChanged(float NewHealth)
{
    percent = NewHealth / MaxHealth;
}
```

こんな感じに設定する。それで、この`OnHealthChanged`を呼びたいときは、

```{.cpp filename="OverlayWidgetController.cpp"}
void UOverlayWidgetController::DealDamage()
{
    Health -= 10;

    OnScoreChangedDelegate.Broadcast(Health)
}
```

としている。けど、なんでControllerはWidget本体を知らない方がいいのか……？

![](images/5-2.png)

![](images/5-3.png)

これらについてもう少し考えてみる。

つまりは、ControllerがCharacterとかのデータのやり取りを全てしており、WidgetがControllerにアクセスすればすべての欲しいものがあると。それから、全部のWidgetをTickさせながらアクセスするのは馬鹿らしいので、ControllerがDelegateを持って、Widget側がそれに関数をAssignさせ、Widgetに依存せずに知らないControllerが淡々とTickとUpdateをしていくわけだ。

こうすることによって、Widgetの数が増えても、考えるべきなのはWidgetの中でDelegateにAssignする関数だけで済むし、Controllerは淡々と必用なVariablesを必用に応じてUpdateして、Delegateの実行、つまりBroadCastをしていくだけである。複雑になってもこれは変わらないので、Module性が高まる。

### Slot as Overlay SlotなどのUI関連

Comprehensiveなチュートリアルとかドキュメントとかを読む必要あり。

