{
  "hash": "9a96697f264a5b94b4ec763eb067f651",
  "result": {
    "markdown": "---\ntitle: \"Section 02\"\nauthor: \"Serika Yuzuki\"\ndate: \"2023-10-09\"\ncategories: [UE5, Aura, Udemy, Game, Programming]\nimage: \"images/thumbnail.png\"\n---\n\nSec 02 について\n\n## 流れ\n\n1. まずRiderで作業するのに集中するために、Auto CompileやLive Codingを消した。\n1. キャラクターの基本のセットアップ\n    1. Created Character Class\n    1. Created Weapon object and attached to mesh\n    1. Applied Animation\n1. Setting up player enhanced input\n    1. Private Dependency Module にEnhanced Inputを入れないといけない\n\n## 発見\n\n### BindActionの第4引数に渡す関数ポインタの型をドキュメントで知りたい\n\n```cpp\nvoid AAuraPlayerController::SetupInputComponent()\n{\n\t...\n\tEnhancedInputComponent->BindAction(MoveAction, ETriggerEvent::Triggered, this, &AAuraPlayerController::Move);\n}\n\nvoid AAuraPlayerController::Move(const FInputActionValue& Value) {...}\n```\n\nBindActionの第4引数には、`void (AAuraPlayerController::*)(const FInputActionValue&)` という型の関数ポインタを渡す必要がある。これはどこを読めばわかるのか？\n\nBindActionの[ドキュメント](https://docs.unrealengine.com/5.3/en-US/API/Plugins/EnhancedInput/UEnhancedInputComponent/BindAction/3/)によれば、上の関数の引数の形は\n```cpp\ntemplate<class UserClass>\nFInputActionBinding & BindAction\n(\n    const FName ActionName,\n    const EInputEvent KeyEvent,\n    UserClass * Object,\n    typename FInputActionHandlerWithKeySignature::TMethodPtr< UserClass > Func\n)\n```\nで、この第四引数である`FEnhancedInputActionHandlerValueSignature`の[ドキュメント](https://docs.unrealengine.com/5.3/en-US/API/Plugins/EnhancedInput/FEnhancedInputActionHandlerValue-/)によれば、\n`typedef TBaseDelegate_OneParam< void, const FInputActionValue & > FEnhancedInputActionHandlerValueSignature`\n\n### Rotation MatrixのGetUnitAxisの意味\n\n\n```{cpp}\nconst FVector2D InputAxisVector = Value.Get<FVector2D>();\nconst FRotator Rotation = GetControlRotation();\nconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\nconst FVector ForwardDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\nconst FVector RightDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);\n\nif (APawn* ContrlledPawn = GetPawn<APawn>())\n{\n    ContrlledPawn->AddMovementInput(ForwardDirection, InputAxisVector.Y);\n    ContrlledPawn->AddMovementInput(RightDirection, InputAxisVector.X);\n}\n```\n\n\n`FRotationMatrix(YawRotation)` は、YawRotationを回転行列に変換している。この回転行列は、YawRotationの回転軸をZ軸にしている。ここまではいいが、行列にする意味は何か？\n\n`GetUnitAxis(EAxis::X)` は、回転行列の1列目を取得していることになる。\n\n$$\n\\begin{pmatrix}\n\\cos\\theta & -\\sin\\theta & 0 \\\\\n\\sin\\theta & \\cos\\theta & 0 \\\\\n0 & 0 & 1\n\\end{pmatrix}\n\\longmapsto\n\\begin{pmatrix}\n\\cos\\theta \\\\\n\\sin\\theta \\\\\n0\n\\end{pmatrix}\n,\n\\begin{pmatrix}\n-\\sin\\theta \\\\\n\\cos\\theta \\\\\n0\n\\end{pmatrix}\n,\n\\begin{pmatrix}\n0 \\\\\n0 \\\\\n1\n\\end{pmatrix}\n$$\n\nこれについて考えれば、1,2,3列目のベクトルとは、回転後のベクトルの、向いている方向、その方向を $x'$ 軸として作り上げる右手系 $x', y', z'$ の基底ベクトルになっていることがわかる。\n\n`GetControlRotation()`でControl世界の回転を取得しているので、その世界の $x, y$ 軸への方向に動きを制限して、Inputを適用している。\n\n## 問題点\n\n",
    "supporting": [
      "section_02_files"
    ],
    "filters": [],
    "includes": {}
  }
}