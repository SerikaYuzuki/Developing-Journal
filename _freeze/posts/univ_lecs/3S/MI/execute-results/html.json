{
  "hash": "b6c54f44e1c1faa4a8331a0c7dffb47f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"マテリアルインフォルマティクス\"\nauthor: \"Serika Yuzuki\"\ndate: \"2024-4-9\"\ncategories: [University, 2024]\nimage: \"images/thumbnail.png\"\n---\n\n\n\n\n# ノート\n\n## 第一講\n\n出席さえすれば大丈夫だ！　出席し続けろよ、俺！\n\n::: {#ad548f43 .cell execution_count=1}\n``` {.python .cell-code}\nimport random\na = random.random()\n\nprint(a)\n\nif a > 0.3:\n    print(\"Higher\")\nelse:\n    print(\"Lower or Equal\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.1150399761190275\nLower or Equal\n```\n:::\n:::\n\n\n::: {#7d37ecf5 .cell execution_count=2}\n``` {.python .cell-code}\nimport random\n\ncnt = 0\n\nfor i in range(1000000):\n    a = random.random()\n    b = random.random()\n    if a**2 + b**2 >= 1:\n        cnt += 1\n\nprint(4*cnt/1000000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.858488\n```\n:::\n:::\n\n\n## 第二講\n\n::: {#b99c986b .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-4, 4, 300)\n\ny1 = x**4 - x**3 - 7.39*x**2 + 5.08*x + 4.2\ny2 = 0*x\n\nplt.plot(x, y1, label='$y = x^4 - x^3 - 7.39x^2 + 5.08x + 4.2$')\nplt.plot(x, y2, label='$y = 0$')\n\nplt.xlabel('$x$')\nplt.ylabel('$y$')\nplt.title('Homework 2')\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MI_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n::: {#20521237 .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\n\ndef f(x):\n    return x**4 - x**3 - 7.39*x**2 + 5.08*x + 4.2\n\ndef df(x):\n    return 4*x**3 - 3*x**2 - 14.78*x + 5.08\n\ndef newton_method(x0, f, df, tol=0.001, max_iter=100):\n    x = x0\n    for _ in range(max_iter):\n        x_new = x - f(x) / df(x)\n        if abs(x_new - x) < tol:\n            return x_new\n        x = x_new\n    return x\n\nxs = [1.0, -0.5, -2.5, 3.0]\nroot = []\nfor x0 in xs:\n    root.append(newton_method(x0, f, df))\n\nprint(root)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1.200000000986774, -0.5, -2.5, 2.8000000000031053]\n```\n:::\n:::\n\n\n::: {#82e446dd .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\np = 7\nr = 18\nb = 2\n\ndef lorenz(X, t, p, r, b):\n    x, y, z = X\n    dx_dt = p*(-x + y)\n    dy_dt = -x*z + r*x -y\n    dz_dt = x*y - b*z\n    return [dx_dt, dy_dt, dz_dt]\n\nX0 = [1, 3, 3.5]\n\nt = np.linspace(0, 40, 40000)\n\nX = odeint(lorenz, X0, t, args=(p, r, b))\n\nplt.plot(t, X[:, 0], label='x')\nplt.plot(t, X[:, 1], label='y')\nplt.xlabel('$t$')\nplt.ylabel('$x,\\;y$')\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n<>:25: SyntaxWarning: invalid escape sequence '\\;'\n<>:25: SyntaxWarning: invalid escape sequence '\\;'\n/var/folders/tn/xv5_ldbs095b2qr06qxnz2_40000gn/T/ipykernel_47698/1930065823.py:25: SyntaxWarning: invalid escape sequence '\\;'\n  plt.ylabel('$x,\\;y$')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](MI_files/figure-html/cell-6-output-2.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "MI_files"
    ],
    "filters": [],
    "includes": {}
  }
}