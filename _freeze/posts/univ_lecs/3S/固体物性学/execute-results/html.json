{
  "hash": "5d36d62f2443908234e3024f74f14131",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"材料反応工学\"\nauthor: \"Serika Yuzuki\"\ndate: \"2024-4-5\"\ncategories: [University, 2024]\nimage: \"images/thumbnail.png\"\n---\n\n$$ \\require{physics} \n\\require{mhchem}\n$$\n\n# ノート\n\n## 結晶格子\n\n### 結晶とは\n\n- 結晶とは、原子や分子が規則的に並んだ固体のことである。\n- 理想的な結晶、現実の結晶、多結晶、非晶質(アモルファス)の4つの種類がある。\n\n講義ではまず２次元Latticeについて考える。\n\n### 基本単位胞\n\n- 結晶構造を記述するための基本単位胞とは、結晶構造の最小単位であり、その結晶構造を無限に繰り返すことで全体の結晶構造が構築される。\n- 基本単位胞の取り方は無限にあるが、最も簡単なものを選ぶといいらしい。\n- 基本単位胞内の任意の点を格子点と呼んでいる。ただし、全ての別の単位胞に対して同じ位置として考える。バラバラに選ぶものではない。\n- 格子点同士を最短で結ぶベクトルを基本並進ベクトルと呼ぶ。\n\n::: {#fe1a5bca .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the lattice vectors\na1 = np.array([1, 0])\na2 = np.array([0, 1])\n\n# Generate a grid of lattice points\nx = np.arange(-2, 3)\ny = np.arange(-2, 3)\nX, Y = np.meshgrid(x, y)\n\n# Plot the lattice points\nplt.figure(figsize=(6, 6))\nplt.scatter(X, Y, color='blue')\n\n# Plot the lattice vectors\nplt.quiver(0, 0, a1[0], a1[1], angles='xy', scale_units='xy', scale=1, color='red')\nplt.quiver(0, 0, a2[0], a2[1], angles='xy', scale_units='xy', scale=1, color='green')\n\n# Set the aspect ratio and limits\nplt.gca().set_aspect('equal', adjustable='box')\nplt.xlim(-2.5, 2.5)\nplt.ylim(-2.5, 2.5)\n\n# Add labels\nplt.text(a1[0], a1[1], 'a1', fontsize=12, ha='right')\nplt.text(a2[0], a2[1], 'a2', fontsize=12, va='bottom')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](固体物性学_files/figure-html/cell-2-output-1.png){width=492 height=485}\n:::\n:::\n\n\n- すると、任意の格子点は $\\symbfit{R} = n_1 \\symbfit{a}_1 + n_2 \\symbfit{a}_2$ と表すことができる。\n\n### ３次元結晶格子\n\n- ３次元結晶格子は、２次元結晶格子の拡張である。並進ベクトルの性質はそれほど変わらない。\n- ３次元格子は１４種類のブラベ格子に分類される。\n- ３次元格子の並進ベクトルを基底ベクトルで表すなんてこともする。\n    - 体心立方格子\n        $$\n        \\begin{aligned}\n        \\symbfit{a}_1 &= \\frac{a}{2} ( \\symbfit{e}_x + \\symbfit{e}_y + \\symbfit{e}_z ) \\\\\n        \\symbfit{a}_2 &= \\frac{a}{2} ( -\\symbfit{e}_x + \\symbfit{e}_y + \\symbfit{e}_z ) \\\\\n        \\symbfit{a}_3 &= \\frac{a}{2} ( \\symbfit{e}_x - \\symbfit{e}_y + \\symbfit{e}_z ) \\\\\n        \\end{aligned}\n        $$\n\n    - 面心立方格子\n        $$\n        \\begin{aligned}\n        \\symbfit{a}_1 &= \\frac{a}{2} ( \\symbfit{e}_x + \\symbfit{e}_y ) \\\\\n        \\symbfit{a}_2 &= \\frac{a}{2} ( -\\symbfit{e}_x + \\symbfit{e}_y ) \\\\\n        \\symbfit{a}_3 &= \\frac{a}{2} ( \\symbfit{e}_x - \\symbfit{e}_y ) \\\\\n        \\end{aligned}\n        $$\n\n- 基本単位胞では面倒なことがあるので、慣用単位砲で考えることもある。その一例として、ウィグナー・ツァイト胞がある。ウィグナーサイツ胞とは、ある格子点と、その周りの格子点との間の垂直二等分面で囲まれた領域における最小のセル（胞）のことである。\n    - 二次元のウィグナーサイツ胞は、過去問のセクションで図示している。\n\n\n\n\n# 過去問\n\n## 2018年度\n\n### 問1\n\n1. ウィグナーサイツ胞とは、ある格子点と、その周りの格子点との間の垂直二等分面で囲まれた領域における最小のセル（胞）のことである。\n\n::: {#b9cb0cf7 .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import Rectangle\n\n# Define the lattice vectors\na1 = np.array([1, 0])\na2 = np.array([0, 1])\n\n# Generate a grid of lattice points\nx = np.arange(-2, 3)\ny = np.arange(-2, 3)\nX, Y = np.meshgrid(x, y)\n\n# Plot the lattice points\nplt.figure(figsize=(6, 6))\nplt.scatter(X, Y, color='blue')\n\n# Plot the lattice vectors\nplt.quiver(0, 0, a1[0], a1[1], angles='xy', scale_units='xy', scale=1, color='red')\nplt.quiver(0, 0, a2[0], a2[1], angles='xy', scale_units='xy', scale=1, color='green')\n\n# Draw the Wigner-Seitz cell\nrectangle = Rectangle((-0.5, -0.5), 1, 1, edgecolor='black', facecolor='none')\nplt.gca().add_patch(rectangle)\n\n# Set the aspect ratio and limits\nplt.gca().set_aspect('equal', adjustable='box')\nplt.xlim(-2.5, 2.5)\nplt.ylim(-2.5, 2.5)\n\n# Add labels\nplt.text(a1[0], a1[1], 'a1', fontsize=12, ha='right')\nplt.text(a2[0], a2[1], 'a2', fontsize=12, va='bottom')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](固体物性学_files/figure-html/cell-3-output-1.png){width=492 height=485}\n:::\n:::\n\n\n::: {#15240b28 .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\n\n# Define the lattice vectors\na1 = np.array([1, 0])\na2 = np.array([1/2, np.sqrt(3)/2])\n\n# Generate a grid of lattice points\nx = np.arange(-2, 3)\ny = np.arange(-2, 3)\nX, Y = np.meshgrid(x, y)\n\n# Generate the hexagonal lattice points\nX_hex = X + Y/2\nY_hex = Y * np.sqrt(3)/2\n\n# Plot the lattice points\nplt.figure(figsize=(6, 6))\nplt.scatter(X_hex, Y_hex, color='blue')\n\n# Plot the lattice vectors\nplt.quiver(0, 0, a1[0], a1[1], angles='xy', scale_units='xy', scale=1, color='red')\nplt.quiver(0, 0, a2[0], a2[1], angles='xy', scale_units='xy', scale=1, color='green')\n\n# Draw the Wigner-Seitz cell\npolygon = RegularPolygon((0, 0), 6, radius=1/np.sqrt(3), edgecolor='black', facecolor='none')\nplt.gca().add_patch(polygon)\n\n# Set the aspect ratio and limits\nplt.gca().set_aspect('equal', adjustable='box')\nplt.xlim(-2.5, 2.5)\nplt.ylim(-2.5, 2.5)\n\n# Add labels\nplt.text(a1[0], a1[1], 'a1', fontsize=12, ha='right')\nplt.text(a2[0], a2[1], 'a2', fontsize=12, va='bottom')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](固体物性学_files/figure-html/cell-4-output-1.png){width=492 height=485}\n:::\n:::\n\n\n2. 三次元六方格子の逆格子点の求め方は次のとおり。\n\n三次元六方格子の基本並進ベクトルは以下のように表されます：\n\n$$\n\\begin{aligned}\n\\mathbf{a}_1 &= a \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix} \\\\\n\\mathbf{a}_2 &= a \\begin{pmatrix} -\\frac{1}{2} \\\\ \\frac{\\sqrt{3}}{2} \\\\ 0 \\end{pmatrix} \\\\\n\\mathbf{a}_3 &= a \\begin{pmatrix} 0 \\\\ 0 \\\\ c \\end{pmatrix}\n\\end{aligned}\n$$\n\nここで、$a$ は格子定数、$c$ は六方格子の高さです。\n\nこれらの基本並進ベクトルから逆格子ベクトルを求めるには、以下の公式を使用します：\n\n$$\nb_i = 2\\pi \\frac{a_j \\times a_k}{a_1 \\cdot (a_2 \\times a_3)}\n$$\n\nここで、(i, j, k) は (1, 2, 3)、(2, 3, 1)、(3, 1, 2) の任意の巡回置換です。\n\nしたがって、三次元六方格子の逆格子ベクトルは以下のようになります：\n\n$$\nb_1 = 2\\pi \\frac{a}{V} (c, -\\sqrt{3}/2, 1/2)\n$$\n$$\nb_2 = 2\\pi \\frac{a}{V} (0, \\sqrt{3}, 0)\n$$\n$$\nb_3 = 2\\pi \\frac{a}{V} (0, 0, 2\\pi/c)\n$$\n\nここで、$V = a^2 \\sqrt{3} c / 2$ は単位胞の体積です。\n\nこれらの逆格子ベクトルは、逆格子空間における格子点の位置を決定します。\n\n::: {#4e50116e .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Define the reciprocal lattice vectors\nb1 = np.array([1, -1/np.sqrt(3), 0])\nb2 = np.array([0, 2/np.sqrt(3), 0])\nb3 = np.array([0, 0, 1])\n\n# Generate a grid of reciprocal lattice points\nx = np.arange(-2, 3)\ny = np.arange(-2, 3)\nz = np.arange(-2, 3)\nX, Y, Z = np.meshgrid(x, y, z)\n\n# Convert the grid to reciprocal lattice coordinates\nX_rec = X*b1[0] + Y*b2[0] + Z*b3[0]\nY_rec = X*b1[1] + Y*b2[1] + Z*b3[1]\nZ_rec = X*b1[2] + Y*b2[2] + Z*b3[2]\n\n# Plot the reciprocal lattice points\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(X_rec, Y_rec, Z_rec, color='blue')\n\n# Set the aspect ratio and limits\nax.set_xlabel('b1')\nax.set_ylabel('b2')\nax.set_zlabel('b3')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](固体物性学_files/figure-html/cell-5-output-1.png){width=409 height=396}\n:::\n:::\n\n\n::: {#e23f8f66 .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the lattice vectors\na1 = np.array([1, 0])\na2 = np.array([1/2, np.sqrt(3)/2])\n\n# Define the reciprocal lattice vectors\nb1 = np.array([1, -1/np.sqrt(3)])\nb2 = np.array([0, 2/np.sqrt(3)])\n\n# Generate a grid of lattice points\nx = np.arange(-2, 3)\ny = np.arange(-2, 3)\nX, Y = np.meshgrid(x, y)\n\n# Convert the grid to lattice coordinates\nX_lat = X*a1[0] + Y*a2[0]\nY_lat = X*a1[1] + Y*a2[1]\n\n# Convert the grid to reciprocal lattice coordinates\nX_rec = X*b1[0] + Y*b2[0]\nY_rec = X*b1[1] + Y*b2[1]\n\n# Plot the lattice points\nplt.figure(figsize=(6, 6))\nplt.scatter(X_lat, Y_lat, color='blue', label='Lattice points')\n\n# Plot the reciprocal lattice points\nplt.scatter(X_rec, Y_rec, color='red', label='Reciprocal lattice points')\n\n# Set the aspect ratio and limits\nplt.gca().set_aspect('equal', adjustable='box')\nplt.xlim(-2.5, 2.5)\nplt.ylim(-2.5, 2.5)\n\n# Add a legend\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](固体物性学_files/figure-html/cell-6-output-1.png){width=492 height=485}\n:::\n:::\n\n\n### 問2\n\n1. 普通に運動方程式を立てる。\n\n$$\nm\\ddots{x_j} = -K(x_j - x_{j-1}) + K(x_{j+1} - x_j) = K(x_{j+1} - 2x_j + x_{j-1})\n$$\n\n2.\n\n$$\nx_j(t) = A e^{i(kja - \\omega t)}\n$$\n\nここで、$A$ は振幅、$k$ は波数、$a$ は格子定数（原子間距離）、$\\omega$ は角周波数です。代入して整理すると、次のようになります：\n\n$$\nm\\omega^2 = 2K(1 - \\cos(ka))\n$$\n\nこれは、振動数 $\\omega$ が波数 $k$ に依存するディスパージョン関係を表しています。\n\n::: {#ed9a3ff7 .cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the parameters\nm = 1.0  # atomic mass\nK = 1.0  # spring constant\na = 1.0  # lattice constant\n\n# Define the wave number range within the first Brillouin zone\nk = np.linspace(-np.pi/a, np.pi/a, 1000)\n\n# Calculate the angular frequency\nomega = np.sqrt(2*K/m * (1 - np.cos(k*a)))\n\n# Plot the dispersion relation\nplt.figure(figsize=(6, 6))\nplt.plot(k, omega)\nplt.xlabel('k (wave number)')\nplt.ylabel('ω (angular frequency)')\nplt.title('Dispersion relation in the first Brillouin zone')\nplt.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](固体物性学_files/figure-html/cell-7-output-1.png){width=523 height=523}\n:::\n:::\n\n\n",
    "supporting": [
      "固体物性学_files"
    ],
    "filters": [],
    "includes": {}
  }
}